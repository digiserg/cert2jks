name: Release and build
on:
  push:
    tags:
      - 'v*'

defaults:
  run:
    shell: bash

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fail if tag is not prefixed by v
        run: |
          if [[ $GITHUB_REF_NAME =~ ^v[0-9]+\.[0-9]+\.[0-9].* ]]; then
              echo "Valid version format"
          else
              echo "Invalid version format"
              exit 1
          fi

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
        run: |
          OPTIONS=""
          if [[ $GITHUB_REF_NAME == *"internal"* ]]; then
            OPTIONS="--prerelease"
          fi
          gh release create "$GITHUB_REF_NAME" \
              --repo="$GITHUB_REPOSITORY" \
              --title="Release for ${GITHUB_REF_NAME}" \
              --generate-notes $OPTIONS

  build:
    needs: [release]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goarch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Build
        env:
          GOARCH: ${{ matrix.goarch }}
        #run: go build -ldflags "-linkmode 'external' -extldflags '-static'" -v -o cert2jks-${{ matrix.goarch }} main.go
        run: |
          mkdir -p dist
          make STATIC=1 CGO_ENABLED=1 BINARY_NAME=cert2jks-${{ matrix.goarch }} build
          sha256sum dist/cert2jks-${{ matrix.goarch }} > dist/cert2jks-${{ matrix.goarch }}.sha256sum

      - name: Upload Artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get TAG
        id: get_tag
        run: echo TAG=${GITHUB_REF##*/} >> $GITHUB_ENV

      - name: Get Repo Owner
        id: get_repo_owner
        run: echo "REPO_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" > $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: "Get docker info"
        run: |
          echo "Actor: ${{ github.actor }}"

      - name: "Log into GitHub Container Registry"
        if: "github.event_name != 'pull_request'"
        uses: "docker/login-action@v1"
        with:
          registry: "ghcr.io"
          username: "${{ github.actor }}"
          password: "${{ secrets.GITHUB_TOKEN }}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          platforms: linux/amd64,linux/arm/v6,linux/arm64
          build-args: |
            VERSION=${{ env.TAG }}
            GitCommit=${{ github.sha }}
          context: .
          push: true
          tags: |
            ghcr.io/${{ env.REPO_OWNER }}/cert2jks:${{ github.sha }}
            ghcr.io/${{ env.REPO_OWNER }}/cert2jks:${{ env.TAG }}
            ghcr.io/${{ env.REPO_OWNER }}/cert2jks:latest
          labels: |
            LABEL org.opencontainers.image.source="https://github.com/${{ env.REPO_OWNER }}/cert2jks"
