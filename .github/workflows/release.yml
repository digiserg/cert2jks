name: Release and build
on:
  push:
    tags:
      - 'v*'

defaults:
  run:
    shell: bash

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fail if tag is not prefixed by v
        run: |
          if [[ $GITHUB_REF_NAME =~ ^v[0-9]+\.[0-9]+\.[0-9].* ]]; then
              echo "Valid version format"
          else
              echo "Invalid version format"
              exit 1
          fi

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
        run: |
          OPTIONS=""
          if [[ $GITHUB_REF_NAME == *"internal"* ]]; then
            OPTIONS="--prerelease"
          fi
          gh release create "$GITHUB_REF_NAME" \
              --repo="$GITHUB_REPOSITORY" \
              --title="Release for ${GITHUB_REF_NAME}" \
              --generate-notes $OPTIONS

  build:
    needs: [release]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goarch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Build
        env:
          GOARCH: ${{ matrix.goarch }}
        #run: go build -ldflags "-linkmode 'external' -extldflags '-static'" -v -o cert2jks-${{ matrix.goarch }} main.go
        run: go build -o cert2jks-${{ matrix.goarch }} main.go

      - name: Archive build output
        uses: actions/upload-artifact@v4
        with:
          name: cert2jks-${{ matrix.goarch }}
          path: cert2jks-${{ matrix.goarch }}
